const draw_edge=function(parent,start_object,end_object){const g=parent.group();const marker=g.marker(12,12,function(add){add.path("M2,0 L2,6 L11,3 Z").fill("#333e");this.ref(9,3);});const dx=end_object.cx()-start_object.cx();const dy=end_object.cy()-start_object.cy();const length=Math.sqrt(dx*dx+dy*dy);const ux=dx/length;const uy=dy/length;const start_x=start_object.cx()+75*ux;const start_y=start_object.cy()+75*uy;const end_x=end_object.cx()-85*ux;const end_y=end_object.cy()-85*uy;const pathData=`M${start_x},${start_y} L${end_x},${end_y}`;const path=g.path(pathData).stroke({width:5,color:"#333e"}).fill("none").marker("end",marker);return g;};const draw_variable=function(parent,variable){const g=parent.group();g.circle(150).stroke({width:5,color:"#333e"}).fill("none").center(0,0);g.text(variable.name).font({family:"DM Mono",size:50,anchor:"middle",}).fill("#333e").translate(-10,10);g.text(variable.subscript).font({family:"DM Mono",size:30,anchor:"middle",}).fill("#333e").translate(-10+25,10+20);return g;};const draw_connector=function(parent){const g=parent.group();const r=10;const offset=20;const x=0;const y=0;const c1=g.circle(r).fill("#333e").center(x-offset,y);const c2=g.circle(r).fill("#333e").center(x,y);const c3=g.circle(r).fill("#333e").center(x+offset,y);return g;};const draw=function(parent,node_list){const g=parent.group();const total_nodes=node_list.length;const node_graphic_list=[];const node_observation_list={};for(const node of node_list){if(node["type"]=="node"){const node_graphic=draw_variable(g,node.hidden_state);node_graphic_list.push(node_graphic);const observation_graphic=draw_variable(g,node.observation);node_observation_list[node_graphic_list.length-1]=observation_graphic;}else if(node["type"]=="connector"){const connector_graphic=draw_connector(g);node_graphic_list.push(connector_graphic);}}
const offset=300;let offset_x=0;for(let i=0;i<total_nodes;i++){const node_graphic=node_graphic_list[i];node_graphic.center(offset_x,0);const observation_graphic=node_observation_list[i];if(observation_graphic!=null){observation_graphic.center(offset_x,300);draw_edge(g,node_graphic,observation_graphic);}
offset_x+=offset;}
for(let i=0;i<total_nodes-1;i++){const edge=draw_edge(g,node_graphic_list[i],node_graphic_list[i+1]);}
return g;};const parse_block=function(parent){let flow=null;for(const c of parent.classList){if(c.startsWith("flow-")){flow=c.slice(5);console.log(flow);break;}}
console.log(parent.innerHTML);const model=JSON.parse(parent.innerHTML);parent.innerHTML="";const svg=SVG().addTo(parent).size("100%","100%");const graphic=draw(svg,model);return graphic;};const render_block=function(parent){const container_rect=parent.getBoundingClientRect();const computed_style=getComputedStyle(parent);const width=container_rect.width-parseFloat(computed_style.paddingLeft)-parseFloat(computed_style.paddingRight);const height=container_rect.height-parseFloat(computed_style.paddingTop)-parseFloat(computed_style.paddingBottom);const margin={top:20,right:20,bottom:20,left:20};const graphic=parent.content;const scale=0.8*Math.min((width-margin.left-margin.right)/graphic.width(),(height-margin.top-margin.bottom)/graphic.height());graphic.transform({a:scale,b:0,c:0,d:scale,e:width/2-(graphic.width()*scale)/2,f:height/2-(graphic.height()*scale)/2,});};const render_all=function(){for(const b of graphic_blocks){if(b.content==null)b.content=parse_block(b);render_block(b);}};let delayer=null;const graphic_blocks=document.querySelectorAll(".hmm");window.addEventListener("resize",function(){if(delayer!=null)clearTimeout(delayer);delayer=setTimeout(function(){render_all();},500);});window.addEventListener("load",function(){render_all();});