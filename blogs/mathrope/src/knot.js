class Knot{constructor(data){this.data=data;const symbols=[];const intersections=[];const trace={};let trace_count=0;const find_bar_row=function(){for(let i=0;i<data.length;++i){for(let j=0;j<data[i].length;++j){if(data[i][j]==="="){return i;}}}};const bar_row_index=find_bar_row();const find_start=function(){for(let i=0;i<data.length;++i){for(let j=0;j<data[i].length;++j){if(data[i][j]==="*"){return{x:j,y:i,};}}}};const get_symbol=function(x,y){if(x>=0&&x<data[0].length&&y>=0&&y<data.length)return data[y][x];return null;};const match_valid=function(x,y,allow_symbols){const symbol=get_symbol(x,y);if(symbol===null)return false;if(allow_symbols.includes(symbol))return symbol;return null;};const check_bar_crossing=function(x,y){if(y===bar_row_index)return true;else return false;};const push_intersection=function(x,y,alpha){if(check_bar_crossing(x,y)){symbols.push({alpha:alpha,x:x,y:y,index:-1,trace:trace_count,});return;}
for(const intersection of intersections){if(intersection.x===x&&intersection.y===y){symbols.push({alpha:alpha,x:x,y:y,index:intersection.index,trace:trace_count,});return;}}
symbols.push({alpha:alpha,x:x,y:y,index:intersections.length,trace:trace_count,});intersections.push({x:x,y:y,index:intersections.length,});};const next_section=function(x,y,expected=null){trace[y]=trace[y]||{};trace[y][x]=trace[y][x]||[];trace[y][x].push(trace_count);trace_count+=1;switch(expected){default:case"l":const l=match_valid(x-1,y,["-","+","%","r","L"]);if(l!==null){switch(l){case"-":next_section(x-1,y,"l");break;case"+":push_intersection(x-1,y,"u");next_section(x-1,y,"l");break;case"%":push_intersection(x-1,y,"o");next_section(x-1,y,"l");break;case"r":next_section(x-1,y,"d");break;case"L":next_section(x-1,y,"u");break;}
break;}
case"r":const r=match_valid(x+1,y,["-","+","%","7","J"]);if(r!==null){switch(r){case"-":next_section(x+1,y,"r");break;case"+":push_intersection(x+1,y,"u");next_section(x+1,y,"r");break;case"%":push_intersection(x+1,y,"o");next_section(x+1,y,"r");break;case"7":next_section(x+1,y,"d");break;case"J":next_section(x+1,y,"u");break;}
break;}
case"u":const u=match_valid(x,y-1,["|","+","%","7","r"]);if(u!==null){switch(u){case"|":next_section(x,y-1,"u");break;case"+":push_intersection(x,y-1,"o");next_section(x,y-1,"u");break;case"%":push_intersection(x,y-1,"u");next_section(x,y-1,"u");break;case"7":next_section(x,y-1,"l");break;case"r":next_section(x,y-1,"r");break;}
break;}
case"d":const d=match_valid(x,y+1,["|","+","%","L","J"]);if(d!==null){switch(d){case"|":next_section(x,y+1,"d");break;case"+":push_intersection(x,y+1,"o");next_section(x,y+1,"d");break;case"%":push_intersection(x,y+1,"u");next_section(x,y+1,"d");break;case"L":next_section(x,y+1,"r");break;case"J":next_section(x,y+1,"l");break;}
break;}}};const start=find_start();next_section(start.x,start.y);this.symbols=symbols;this.intersections=intersections;this.bar_row_index=bar_row_index;this.trace=trace;this.trace_count=trace_count;}
get_trace(x,y){if(this.trace[y]==null)return null;if(this.trace[y][x]==null)return null;return this.trace[y][x];}
get_latex_string(){return this.symbols.map((d)=>`${d.alpha}^${d.index >= 0 ? d.index : ""}`).join(", ");}}