const draw_edge=function(parent,key,startPoint,endPoint){const g=parent.group();const controlPoint1={x:startPoint.x+100,y:startPoint.y};const controlPoint2={x:endPoint.x-100,y:endPoint.y};const marker=g.marker(12,12,function(add){add.path("M2,0 L2,6 L11,3 Z").fill("#333e");this.ref(9,3);});const pathData=`M${startPoint.x},${startPoint.y}`+" "+`C${controlPoint1.x},${controlPoint1.y}`+" "+`${controlPoint2.x},${controlPoint2.y}`+" "+`${endPoint.x},${endPoint.y}`;const path=g.path(pathData).stroke({width:1,color:"#333e"}).fill("none").marker("end",marker);const textPath=g.textPath(key,pathData).font({size:14,family:"DM Mono",anchor:"middle"});const pathLength=path.length();const textLength=textPath.length();const startOffset=(pathLength-textLength)/2;textPath.attr("startOffset",startOffset);for(const t of textPath.node.children){t.setAttribute("dy","-5");}
return g;};const draw_node=function(parent,node){const g=parent.group();const content=node["node"];const str=g.text(content.toString()).font({family:"DM Mono",size:18,anchor:"left",}).fill("#333e");const node_width=str.node.getBBox().width;const offset=10;if(node["transition"]!=null){let offset_y=0;for(const[key,value]of Object.entries(node["transition"])){const t=g.group();const path=draw_edge(t,key,{x:0,y:0},{x:100,y:offset_y}).translate(offset+node_width,-6);const child=draw_node(t,value).translate(node_width+offset+100+offset,offset_y);offset_y+=offset+100+offset;}}
return g;};const parse_block=function(parent){let flow=null;for(const c of parent.classList){if(c.startsWith("flow-")){flow=c.slice(5);console.log(flow);break;}}
console.log(parent.innerHTML);const tree=JSON.parse(parent.innerHTML);parent.innerHTML="";const svg=SVG().addTo(parent).size("100%","100%");const tree_graphic=draw_node(svg,tree);return tree_graphic;};const render_block=function(parent){const container_rect=parent.getBoundingClientRect();const computed_style=getComputedStyle(parent);const width=container_rect.width-parseFloat(computed_style.paddingLeft)-parseFloat(computed_style.paddingRight);const height=container_rect.height-parseFloat(computed_style.paddingTop)-parseFloat(computed_style.paddingBottom);const margin={top:20,right:20,bottom:20,left:20};const tree_graphic=parent.content;const scale=0.8*Math.min((width-margin.left-margin.right)/tree_graphic.width(),(height-margin.top-margin.bottom)/tree_graphic.height());tree_graphic.transform({a:scale,b:0,c:0,d:scale,e:width/2-(tree_graphic.width()*scale)/2,f:height/2-(tree_graphic.height()*scale)/2,});};const render_all=function(){for(const b of graphic_blocks){if(b.content==null)b.content=parse_block(b);render_block(b);}};let delayer=null;const graphic_blocks=document.querySelectorAll(".state-diagram");window.addEventListener("resize",function(){if(delayer!=null)clearTimeout(delayer);delayer=setTimeout(function(){render_all();},500);});window.addEventListener("load",function(){render_all();});