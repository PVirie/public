waves=(function(){const draw_mechanical_graphic=function(parent,mediums){const container_rect=parent.getBoundingClientRect();const computed_style=getComputedStyle(parent);const width=container_rect.width-parseFloat(computed_style.paddingLeft)-parseFloat(computed_style.paddingRight);const height=container_rect.height-parseFloat(computed_style.paddingTop)-parseFloat(computed_style.paddingBottom);while(parent.firstChild)parent.firstChild.remove();const svg=SVG().addTo(parent).size("100%","100%");const graphic_group=svg.group();const center_y=height/2;const rect_width=Math.floor(width/100);const particles=[];let x=0,i=0;for(;x<width;x+=rect_width,i++){let aps=0.5;let cls=null;for(const m of mediums){if(x/width<m.lb||x/width>m.rb)continue;aps=m.aps;cls=m.cls;}
const bar=graphic_group.circle(rect_width).center(x,center_y).addClass(cls);particles.push({x:x/width,y:0,v:0,aps:aps,graphic:bar});}
const run=function(){for(const[i,p]of particles.entries()){if(i>=1&&i<particles.length-1){const disp=(particles[i-1].y+particles[i+1].y)*0.5-p.y;p.v+=disp*p.aps-p.v*0.005;}}
for(const[i,p]of particles.entries()){p.graphic.center(p.x*width,center_y-(p.y*height)/2);p.y+=p.v;}};let handler=null;return{set_boundary:function(x,y){const i=Math.floor((x/width)*particles.length);particles[i].y=y;},start:function(){if(handler)return;handler=setInterval(run,30);},stop:function(){clearInterval(handler);handler=null;},is_running:function(){return handler!==null;},};};const draw_em_graphic=function(parent,material){const container_rect=parent.getBoundingClientRect();const computed_style=getComputedStyle(parent);const width=container_rect.width-parseFloat(computed_style.paddingLeft)-parseFloat(computed_style.paddingRight);const height=container_rect.height-parseFloat(computed_style.paddingTop)-parseFloat(computed_style.paddingBottom);while(parent.firstChild)parent.firstChild.remove();const svg=SVG().addTo(parent).size("100%","100%");const graphic_group=svg.group();const center_y=height/2;const rect_width=Math.floor(width/100);const particles=[];let x=0,i=0;for(;x<width;x+=rect_width,i++){let selected_m={mps:1,polar:null,cls:null,};for(const m of material){if(x/width<m.lb||x/width>m.rb)continue;selected_m=m;}
const bar=graphic_group.circle(rect_width).center(x,center_y).addClass(selected_m.cls);particles.push({x:x/width,y:0,v:0,phase:0,amp:0,material:selected_m,graphic:bar});}
const run=function(){let phase_shift=0;for(const[i,p]of particles.entries()){const fy=p.amp*Math.sin(p.phase+phase_shift);p.v+=fy/p.material.mps;p.v*=0.9;if(p.material.polar!=null){phase_shift+=Math.PI*p.material.polar;}}
for(let i=particles.length-1;i>=0;i--){const p=particles[i];p.graphic.center(p.x*width,center_y-(p.y*height)/2);if(i>=1){p.phase=particles[i-1].phase;p.amp=particles[i-1].amp;}
p.y+=p.v;p.y*=0.5;}};let handler=null;return{set_boundary:function(x,phase,amp){const i=Math.floor((x/width)*particles.length);particles[i].phase=phase;particles[i].amp=amp;},start:function(){if(handler)return;handler=setInterval(run,30);},stop:function(){clearInterval(handler);handler=null;},is_running:function(){return handler!==null;},};};return{draw_mechanical_graphic:draw_mechanical_graphic,draw_em_graphic:draw_em_graphic,};})();