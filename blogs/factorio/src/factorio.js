factorio=(function(){const get_csv_data=async function(url){const r=await fetch(url,{method:"GET",});if(r.status!==200){console.error("Failed to fetch data from "+url);return;}
return await r.text();};const trim_item=function(item){return item.trim();};const csv_to_float=function(str){if(str===""){return 0;}
return parseFloat(str);};const csv_to_int=function(str){if(str===""){return 0;}
return parseInt(str);};const make_set=function(arr){const set=new Set();for(const a of arr){set.add(a);}
return set;};const split_csv_line=function(line){const results=[];let current="";let in_string=false;for(let i=0;i<line.length;i++){if(line[i]==='"'){in_string=!in_string;}else if(line[i]===","&&!in_string){results.push(current);current="";}else{current+=line[i];}}
results.push(current);return results;};const highs_settings={locateFile:(file)=>"../../libs/"+file,};let highs=null;const load=async function(){highs=await Module(highs_settings);const hashes=window.location.hash.substring(1).split("&");let source=hashes.find((h)=>h.startsWith("source="));let num_max_by_products=2;let assembler_list=null;let recipe_list=null;if(source==null){assembler_list="./data/assemblers.csv";recipe_list="./data/recipes.csv";}
const assembler_data=await get_csv_data(assembler_list);const recipe_data=await get_csv_data(recipe_list);assemblers={};const assembler_lines=assembler_data.split("\n");const assembler_headers=split_csv_line(assembler_lines[0]);for(let i=1;i<assembler_lines.length;i++){const row=split_csv_line(assembler_lines[i]);if(row[0]===""){continue;}
const id=row[0];const assembler={id:id,speed_factor:csv_to_float(row[1]),base_productivity:csv_to_float(row[2]),power_consumption:csv_to_float(row[3]),power_drain:csv_to_float(row[4]),pollution:csv_to_float(row[5]),module_slots:csv_to_int(row[6]),unlock_planet:row[7],fuel_id:row[8],fuel_consumption_rate:csv_to_float(row[9]),};assemblers[id]=assembler;}
data=[];const recipe_lines=recipe_data.split("\n");const recipe_headers=split_csv_line(recipe_lines[0]);for(let i=1;i<recipe_lines.length;i++){const row=split_csv_line(recipe_lines[i]);if(row[4+num_max_by_products*2]===""){continue;}
const craft_machines=row[4+num_max_by_products*2].split(",").map(trim_item);const base_craft_time=csv_to_float(row[2+num_max_by_products*2]);const buildable_on=make_set(row[3+num_max_by_products*2].split(",").map(trim_item));const products=[];for(let j=0;j<num_max_by_products+1;j++){if(row[j*2]!==""){products.push({id:row[j*2],num_per_tick:csv_to_float(row[j*2+1]),});}}
for(const craft_machine of craft_machines){const speed_factor=assemblers[craft_machine].speed_factor;const productivity=assemblers[craft_machine].base_productivity/100+1.0;const datum={craft_machine:craft_machine,craft_from:craft_machine,base_craft_time:base_craft_time,craft_time:base_craft_time/speed_factor,fuel:null,unlock_planet:assemblers[craft_machine].unlock_planet,buildable_on:buildable_on,products:[],requires:[],};for(const product of products){datum.products.push({id:product.id,num_per_tick:product.num_per_tick*productivity,});}
if(assemblers[craft_machine].fuel_id!==""){datum.fuel={id:assemblers[craft_machine].fuel_id,consumption_rate:assemblers[craft_machine].fuel_consumption_rate,};}
let component_index=5+num_max_by_products*2;while(component_index<row.length){if(row[component_index]!==""){datum.requires.push({id:row[component_index],num_per_tick:csv_to_float(row[component_index+1]),});}
component_index+=2;}
data.push(datum);}}
if(true){const new_data=[];const products=[];let requires=null;let base_craft_time=null;let craft_time=null;let unlock_planet=null;let buildable_on=null;for(const datum of data){if(datum.craft_machine.trim().toLowerCase()==="scrap recycling"){base_craft_time=datum.base_craft_time;craft_time=datum.craft_time;unlock_planet=datum.unlock_planet;buildable_on=datum.buildable_on;products.push(...datum.products);requires=datum.requires;}else{new_data.push(datum);}}
scrap_recycling_datum={craft_machine:"Recycler",craft_from:"Recycler",base_craft_time:base_craft_time,craft_time:craft_time,unlock_planet:unlock_planet,buildable_on:buildable_on,products:products,requires:requires,cost:10,is_scrap_recycling:true,};new_data.push(scrap_recycling_datum);data=new_data;}
all_products={};all_bases={};all_productions={};all_production_details={};recycler_details={};for(const datum of data){for(const p of datum.products){const id=p.id.replaceAll(" ","_").replaceAll(".","_");if(all_products[id]==null){all_products[id]=p.id;}}
const is_base=datum.requires.length===0;if(is_base){for(const p of datum.products){const id=p.id.replaceAll(" ","_").replaceAll(".","_");all_bases[id]=p.id;}}
const prod_id=`${datum.products.map((p) => p.id.replaceAll(" ", "_").replaceAll(".", "_")).join("_")}-from-${datum.requires.map((p) => p.id.replaceAll(" ", "_").replaceAll(".", "_")).join("-")}-where-${datum.craft_machine}`;all_productions[prod_id]=`${datum.craft_from} for ${datum.products.map((p) => p.id).join(", ")} from ${datum.requires.map((p) => p.id).join(", ")}`;all_production_details[prod_id]=datum;if(datum.is_scrap_recycling){scrap_recycling_id=prod_id;}else if(datum.craft_machine.trim().toLowerCase().includes("recycler")){recycler_details[prod_id]=datum;}}
require_resource_rate=Object.keys(all_products).map((id)=>{return Object.keys(all_productions).map((production_id)=>{return 0;});});production_speed=Object.keys(all_products).map((id)=>{return Object.keys(all_productions).map((production_id)=>{return 0;});});for(const[prod_id,datum]of Object.entries(all_production_details)){const prod_index=Object.keys(all_productions).indexOf(prod_id);for(const p of datum.products){const id=p.id.replaceAll(" ","_").replaceAll(".","_");const index=Object.keys(all_products).indexOf(id);production_speed[index][prod_index]+=p.num_per_tick/datum.craft_time;}
for(const p of datum.requires){const id=p.id.replaceAll(" ","_").replaceAll(".","_");const index=Object.keys(all_products).indexOf(id);require_resource_rate[index][prod_index]+=p.num_per_tick/datum.craft_time;}
if(datum.fuel!=null){const id=datum.fuel.id.replaceAll(" ","_").replaceAll(".","_");const index=Object.keys(all_products).indexOf(id);require_resource_rate[index][prod_index]+=datum.fuel.consumption_rate;}}
recycling_artifact_rate=Object.keys(all_products).map((id)=>{return Object.keys(recycler_details).map((production_id)=>{return 0;});});recycling_consumption_rate=Object.keys(all_products).map((id)=>{return Object.keys(recycler_details).map((production_id)=>{return 0;});});for(const[prod_id,datum]of Object.entries(recycler_details)){const prod_index=Object.keys(recycler_details).indexOf(prod_id);for(const p of datum.products){const id=p.id.replaceAll(" ","_").replaceAll(".","_");const index=Object.keys(all_products).indexOf(id);recycling_artifact_rate[index][prod_index]+=p.num_per_tick/datum.craft_time;}
for(const p of datum.requires){const id=p.id.replaceAll(" ","_").replaceAll(".","_");const index=Object.keys(all_products).indexOf(id);recycling_consumption_rate[index][prod_index]+=p.num_per_tick/datum.craft_time;}}
return{assemblers:assemblers,data:data,};};const calculate=function(allowed_production_checker,target_speed_getter){const allowed_production=Object.keys(all_productions).map(allowed_production_checker);const target_speed=Object.keys(all_products).map(target_speed_getter);const costs=Object.keys(all_productions).map((id)=>{return all_production_details[id].cost||1;});const params=op.build_production_problem(require_resource_rate,production_speed,allowed_production,target_speed,costs);const PROBLEM=`Minimize
                                    obj:
                                     ${params.obj}
                                    Subject To
                                     ${params.constraints
                                         .map((c, i) => {
                                             return `c${i}:${c}`;
                                         })
                                         .join("\n ")}
                                    Bounds
                                     ${params.bounds.join("\n ")}
                                    End`;const sol=highs.solve(PROBLEM);console.log(sol);const results=Object.keys(sol.Columns).filter((id)=>{return id.startsWith("x")&&sol.Columns[id].Primal>0;}).map((id,index)=>{return[sol.Columns[id].Index,sol.Columns[id].Primal];});const result_mapped=results.map((r)=>{return{id:Object.keys(all_productions)[r[0]],count:r[1],};});let count_scrap_recyclers=0;for(const r of result_mapped){if(r.id===scrap_recycling_id){count_scrap_recyclers=r.count;break;}}
if(Math.abs(count_scrap_recyclers)>1e-4){const recycler_result_mapped=calculate_recycler(Math.ceil(count_scrap_recyclers),allowed_production_checker);for(const recycler_result of recycler_result_mapped){const found=result_mapped.find((r)=>r.id===recycler_result.id);if(found==null){result_mapped.push(recycler_result);}else{found.count=recycler_result.count;}}}
return result_mapped;};const calculate_recycler=function(num_scrap_recyclers,allowed_production_checker){const resource_recycling_target=Object.keys(all_products).map((id)=>{const found=scrap_recycling_datum.products.find((p)=>p.id===all_products[id]);if(found==null){return 0;}
return(found.num_per_tick*num_scrap_recyclers)/scrap_recycling_datum.craft_time;});const allowed_recyclers=Object.keys(recycler_details).map(allowed_production_checker);const params=op.build_recycling_problem(resource_recycling_target,recycling_artifact_rate,recycling_consumption_rate,allowed_recyclers);const PROBLEM=`Minimize
                                    obj:
                                     ${params.obj}
                                    Subject To
                                     ${params.constraints
                                         .map((c, i) => {
                                             return `c${i}:${c}`;
                                         })
                                         .join("\n ")}
                                    Bounds
                                     ${params.bounds.join("\n ")}
                                    End`;const sol=highs.solve(PROBLEM);console.log(sol);const results=Object.keys(sol.Columns).filter((id)=>{return id.startsWith("x")&&sol.Columns[id].Primal>0;}).map((id,index)=>{return[sol.Columns[id].Index,sol.Columns[id].Primal];});const result_mapped=results.map((r)=>{return{id:Object.keys(recycler_details)[r[0]],count:r[1],};});return result_mapped;};let data=null;let assemblers=null;let all_products=null;let all_bases=null;let all_productions=null;let all_production_details=null;let require_resource_rate=null;let production_speed=null;let scrap_recycling_id=null;let scrap_recycling_datum=null;let recycler_details=null;let recycling_artifact_rate=null;let recycling_consumption_rate=null;return{load:load,calculate:calculate,data:()=>data,assemblers:()=>assemblers,all_products:()=>all_products,all_bases:()=>all_bases,all_productions:()=>all_productions,all_production_details:()=>all_production_details,};})();